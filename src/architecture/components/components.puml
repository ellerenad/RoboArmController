@startuml

package "Sensor Framework" {
    component "HandDataProducer" as HandDataProducer
}

interface "Websocket|" as WebsocketServer
HandDataProducer -- WebsocketServer

package "RoboArmController" {
    component "LeapMotionHandler" as WebSocketClient
    component "DataPublisher" as DataPublisher
    component "JsonParser" as Parser
    component "JsonToDomainMapper" as Mapper
    component "InstructionService" as InstructionService
    component "Command Executor" as CommandExecutor

    WebsocketServer )- WebSocketClient
    WebSocketClient --> DataPublisher: calls
    DataPublisher --> Parser: uses
    DataPublisher --> Mapper: uses
    DataPublisher -> InstructionService: calls
    InstructionService -> CommandExecutor: calls
}

interface "TCP\nSocket" as SocketServer
CommandExecutor -( SocketServer

package "Tensorflow Framework" {
    component "Tensorflow Framework" as MLFramework
    InstructionService ----> MLFramework: uses

}

package "Training Module" {
    component "RoboArmControllerTraining" as ModelGenerator
    ModelGenerator -> MLFramework: uses
}

interface "Files" as Files

Files -- ModelGenerator
InstructionService -- Files


package RoboArmSimulation {
    component "Server" as InstructionServer
    component "Gazebo Simulation" as Simulation
    component "RoboArmPlugin" as ControllerPlugin

    InstructionServer -> ControllerPlugin: calls
    ControllerPlugin -> Simulation: controls
    SocketServer - InstructionServer
}



@enduml